{"ast":null,"code":"var _jsxFileName = \"/home/devcambo/IdeaProjects/expr-SpringCloudAwsS3/src/main/frontend/src/context/FileContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport axios from 'axios';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the file context\nexport const useFileContext = () => {\n  _s();\n  return useContext(FileContext);\n};\n\n// Provider component\n_s(useFileContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const FileProvider = ({\n  children\n}) => {\n  _s2();\n  const [files, setFiles] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Function to upload a file\n  const uploadFile = async file => {\n    setLoading(true);\n    setError(null);\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      await axios.post('/api/files/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n\n      // After successful upload, refresh the file list\n      await fetchFiles();\n      return true;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Error uploading file');\n      console.error('Upload error:', err);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to download a file\n  const downloadFile = async fileName => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.get(`/api/files/${fileName}`, {\n        responseType: 'blob'\n      });\n\n      // Create a URL for the blob and trigger download\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', fileName);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      return true;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Error downloading file');\n      console.error('Download error:', err);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to delete a file\n  const deleteFile = async fileName => {\n    setLoading(true);\n    setError(null);\n    try {\n      await axios.delete(`/api/files/${fileName}`);\n\n      // After successful deletion, refresh the file list\n      await fetchFiles();\n      return true;\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      setError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'Error deleting file');\n      console.error('Delete error:', err);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to get a viewable URL for a file\n  const getFileUrl = async fileName => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.get(`/api/files/url/${fileName}`);\n      return response.data;\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      setError(((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || 'Error getting file URL');\n      console.error('Get URL error:', err);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to fetch the list of files\n  // Note: This is a mock function as the backend doesn't provide a list files endpoint\n  // In a real application, you would implement this to fetch the actual file list\n  const fetchFiles = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Mock implementation - in a real app, you would call an API endpoint\n      // that returns the list of files\n      // For now, we'll just keep the existing files in state\n\n      // If there was a real endpoint, it would look something like:\n      // const response = await axios.get('/api/files');\n      // setFiles(response.data);\n\n      return true;\n    } catch (err) {\n      var _err$response5, _err$response5$data;\n      setError(((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.message) || 'Error fetching files');\n      console.error('Fetch error:', err);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Initialize by fetching files\n  React.useEffect(() => {\n    fetchFiles();\n  }, []);\n\n  // Context value\n  const value = {\n    files,\n    loading,\n    error,\n    uploadFile,\n    downloadFile,\n    deleteFile,\n    getFileUrl,\n    fetchFiles\n  };\n  return /*#__PURE__*/_jsxDEV(FileContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 10\n  }, this);\n};\n_s2(FileProvider, \"9wXoI5dGhvtXh/BJkisHxu5JZ6o=\");\n_c = FileProvider;\nvar _c;\n$RefreshReg$(_c, \"FileProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","axios","jsxDEV","_jsxDEV","FileContext","useFileContext","_s","FileProvider","children","_s2","files","setFiles","loading","setLoading","error","setError","uploadFile","file","formData","FormData","append","post","headers","fetchFiles","err","_err$response","_err$response$data","response","data","message","console","downloadFile","fileName","get","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","remove","_err$response2","_err$response2$data","deleteFile","delete","_err$response3","_err$response3$data","getFileUrl","_err$response4","_err$response4$data","_err$response5","_err$response5$data","useEffect","value","Provider","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/devcambo/IdeaProjects/expr-SpringCloudAwsS3/src/main/frontend/src/context/FileContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\nimport axios from 'axios';\n\n// Create the context\nconst FileContext = createContext();\n\n// Custom hook to use the file context\nexport const useFileContext = () => useContext(FileContext);\n\n// Provider component\nexport const FileProvider = ({ children }) => {\n  const [files, setFiles] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Function to upload a file\n  const uploadFile = async (file) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      await axios.post('/api/files/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      \n      // After successful upload, refresh the file list\n      await fetchFiles();\n      return true;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Error uploading file');\n      console.error('Upload error:', err);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to download a file\n  const downloadFile = async (fileName) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await axios.get(`/api/files/${fileName}`, {\n        responseType: 'blob'\n      });\n      \n      // Create a URL for the blob and trigger download\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', fileName);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      \n      return true;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Error downloading file');\n      console.error('Download error:', err);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to delete a file\n  const deleteFile = async (fileName) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      await axios.delete(`/api/files/${fileName}`);\n      \n      // After successful deletion, refresh the file list\n      await fetchFiles();\n      return true;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Error deleting file');\n      console.error('Delete error:', err);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to get a viewable URL for a file\n  const getFileUrl = async (fileName) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await axios.get(`/api/files/url/${fileName}`);\n      return response.data;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Error getting file URL');\n      console.error('Get URL error:', err);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to fetch the list of files\n  // Note: This is a mock function as the backend doesn't provide a list files endpoint\n  // In a real application, you would implement this to fetch the actual file list\n  const fetchFiles = async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Mock implementation - in a real app, you would call an API endpoint\n      // that returns the list of files\n      // For now, we'll just keep the existing files in state\n      \n      // If there was a real endpoint, it would look something like:\n      // const response = await axios.get('/api/files');\n      // setFiles(response.data);\n      \n      return true;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Error fetching files');\n      console.error('Fetch error:', err);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Initialize by fetching files\n  React.useEffect(() => {\n    fetchFiles();\n  }, []);\n\n  // Context value\n  const value = {\n    files,\n    loading,\n    error,\n    uploadFile,\n    downloadFile,\n    deleteFile,\n    getFileUrl,\n    fetchFiles\n  };\n\n  return <FileContext.Provider value={value}>{children}</FileContext.Provider>;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}